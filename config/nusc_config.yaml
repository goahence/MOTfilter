basic:
  split: 'val'         # dataset split, val/test
  has_velo: False       # whether detector has velo info
  LiDAR_interval: 0.5  # the interval between two adjacent frames of the LiDAR scan, NuScenes: 2HZ
  CLASS_NUM: 7         # number of tracking category, NuScenes: 7

  # CLASS_LABEL: {'bicycle': 0, 
  #               'bus': 1, 
  #               'car': 2, 
  #               'motorcycle': 3, 
  #               'pedestrian': 4, 
  #               'trailer': 5, 
  #               'truck': 6}

preprocessing:
  SF_thre: {0: 0.14, 3: 0.16, 1: 0, 2: 0.16, 5: 0.1, 6: 0, 4: 0.16}
  NMS_thre: 0.08
  NMS_type: blend_nms  # blend_nms, no_blend_nms, blend_soft_nms
  NMS_metric: iou_bev  # iou_bev, iou_3d, giou_bev, giou_3d, d_eucl

association:
  # category_metrics: {1: 'd_eucl', 0: 'd_eucl', 2: 'd_eucl', 3: 'd_eucl', 4: 'd_eucl', 5: 'd_eucl', 6: 'd_eucl'}

  # category_metrics: {1: 'giou_bev', 0: 'giou_3d', 2: 'giou_3d', 3: 'giou_3d', 4: 'giou_3d', 5: 'giou_3d', 6: 'giou_3d'}
  # second_metric: 'giou_bev'

  category_metrics: {1: 'fast_giou_bev', 0: 'fast_giou_3d', 2: 'fast_giou_3d', 3: 'fast_giou_3d', 4: 'fast_giou_3d', 5: 'fast_giou_3d', 6: 'fast_giou_3d'}
  second_metric: 'fast_giou_bev'
  two_stage: False  # Whether to use two-stage data association
  first_thre: {1: 1.34, 0: 1.55, 2: 1.31, 3: 1.44, 4: 1.69, 5: 1.25, 6: 1.21}  # category-specific one-stage thresholds
  # first_thre: {1: 0.5, 0: 0.5, 2: 0.5, 3: 0.5, 4: 0.5, 5: 0.5, 6: 0.5}
  second_thre: {0: 1.0}  # two-stage thresholds
  algorithm : 'Hungarian'  # Greedy, Hungarian, Mutual Nearest Neighbor(MNN)

motion_model:
  # two kalman filter, LinearKalmanFilter, ExtendKalmanFilter
  # filter: {1: 'ExtendKalmanFilter', 0: 'ExtendKalmanFilter', 2: 'ExtendKalmanFilter', 3: 'ExtendKalmanFilter', 4: 'ExtendKalmanFilter', 5: 'ExtendKalmanFilter', 6: 'ExtendKalmanFilter'}
  # five motion model, Linear Model: CV, CA, Non-Linear: CTRA, CTRV, BICYCLE, CTRA2
  # note the consistency of the linear relationship between the model and the filter
  # model: {1: 'CTRA', 0: 'BICYCLE', 2: 'CTRA', 3: 'BICYCLE', 4: 'CTRA', 5: 'CTRA', 6: 'CTRA'}
  filter: {1: 'ExtendKalmanFilter', 0: 'ExtendKalmanFilter', 2: 'ExtendKalmanFilter', 3: 'ExtendKalmanFilter', 4: 'ExtendKalmanFilter', 5: 'LinearKalmanFilter', 6: 'ExtendKalmanFilter'}
  # filter: {1: 'LinearKalmanFilter', 0: 'LinearKalmanFilter', 2: 'LinearKalmanFilter', 3: 'LinearKalmanFilter', 4: 'LinearKalmanFilter', 5: 'LinearKalmanFilter', 6: 'LinearKalmanFilter'}
  model: {1: 'CTRA', 0: 'BICYCLE', 2: 'CTRA', 3: 'BICYCLE', 4: 'CTRA', 5: 'CA', 6: 'CTRA'}
  # model: {1: 'CTRA2', 0: 'BICYCLE', 2: 'CTRA2', 3: 'BICYCLE', 4: 'CTRA2', 5: 'CA', 6: 'CTRA2'}

life_cycle:
  max_age: {1: 5, 0: 5, 2: 5, 3: 5, 4: 5, 5: 5, 6: 5}
  min_hit: {1: 1, 0: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}
  decay_rate: {0: 0.05, 3: 0.1, 1: 0.3, 2: 0.2, 5: 0.15, 6: 0.25, 4: 0.15}

output:
  punish_num: 10         # The maximum number of predicted frames to write to the output file
  post_nms: False       # whether to use post-nms, this feature is used to reduce FP prediction
  NMS_thre: 0.08
  NMS_type: blend_nms   # blend_nms, no_blend_nms, blend_soft_nms
  NMS_metric: iou_bev   # iou_bev, iou_3d, giou_bev, giou_3d, d_eucl

debug:
  is_debug: true # Whether to debug the code

